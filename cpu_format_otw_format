To convert cpu format sc8 - complex<int8_t> to fc32 - complex<float>, we only need to normalize all values, 
i.e. make them in {-1.0, +1.0 } .. See [2]
CPU format
-------------
The CPU format is a string that describes the format of host memory. Conversions for the following CPU formats have been implemented:

    fc64 - complex<double>
    fc32 - complex<float>
    sc16 - complex<int16_t>
    sc8 - complex<int8_t>

The following are not implemented, but are listed to demonstrate naming convention:

    f32 - float
    f64 - double
    s16 - int16_t
    s8 - int8_t

The CPU format can be chosen depending on what the application requires.

otw format
------------


The OTW format is a string that describes the format over-the-wire. The following over-the-wire formats have been implemented:

    sc16 - Q16 I16
    sc8 - Q8_1 I8_1 Q8_0 I8_0
    sc12 (Only some devices)

The following are not implemented, but are listed to demonstrate naming convention:

    s16 - R16_1 R16_0
    s8 - R8_3 R8_2 R8_1 R8_0

Setting the OTW ("over-the-wire") format is, in theory, transparent to the application, but changing this can have some side effects. Using less bits for example (e.g. when going from otw_format sc16 to sc8) will reduce the dynamic range, and increases quantization noise. On the other hand, it reduces the load on the data link and thus allows more bandwidth (a USRP N210 can work with 25 MHz bandwidth for 16-Bit complex samples, and 50 MHz for 8-Bit complex samples).


[1] https://files.ettus.com/manual/structuhd_1_1stream__args__t.html
[2] http://lists.ettus.com/pipermail/usrp-users_lists.ettus.com/2017-November/027126.html
